---
// src/pages/curator/desk.astro
import Layout from '../../layouts/Layout.astro';
---
<Layout title="策展人后台">
  <div class="desk-container">
    <h1>策展人后台</h1>
    <p>在这里，直接粘贴你已经写好的、完整的Markdown展品内容。</p>
    <form id="curator-form">
      <div class="form-group">
        <label for="file-name">文件名 (例如: exhibit-7.md)</label>
        <input type="text" id="file-name" placeholder="exhibit-7.md" required />
      </div>
      <div class="form-group">
        <label for="md-content">Markdown 内容</label>
        <textarea id="md-content" placeholder="---
title: '展品 #007: ...'
description: '...'
...
---

### 策展人笔记：

..." required></textarea>
      </div>
      <button type="submit" id="submit-btn">提交新展品</button>
      <div id="status-message"></div>
    </form>
  </div>
</Layout>

<script>
  // --- 这是我们进行最终修正的地方 ---
  
  // 步骤1：找到所有元素
  const form = document.getElementById('curator-form');
  const statusMessage = document.getElementById('status-message');

  // 步骤2：使用“类型断言”为每个元素指定明确的“角色”
  const fileNameInput = document.getElementById('file-name') as HTMLInputElement;
  const mdContentInput = document.getElementById('md-content') as HTMLTextAreaElement;
  const button = document.getElementById('submit-btn') as HTMLButtonElement;


  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    button.disabled = true;
    button.textContent = '正在提交中...';
    statusMessage.textContent = '';

    try {
      // 现在TypeScript完全知道fileNameInput和mdContentInput有.value属性了
      const response = await fetch('/api/submit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          fileName: fileNameInput.value,
          mdContent: mdContentInput.value 
        }),
      });

      const result = await response.json();

      if (response.ok) {
        statusMessage.textContent = result.message;
        statusMessage.style.color = 'green';
        fileNameInput.value = ''; // 成功后清空
        mdContentInput.value = ''; // 成功后清空
      } else {
        throw new Error(result.error || '未知错误');
      }
    } catch (error) {
      statusMessage.textContent = `出错了: ${error.message}`;
      statusMessage.style.color = 'red';
    } finally {
      // TypeScript也完全知道button有.disabled属性
      button.disabled = false;
      button.textContent = '提交新展品';
    }
  });
</script>

<style>
  /* 样式保持不变 */
  .desk-container {
    max-width: 800px;
    margin: 0 auto;
  }
  .form-group {
    margin-bottom: 1.5rem;
  }
  label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }
  input[type="text"], textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--color-border);
    border-radius: 4px;
    font-size: 1rem;
    font-family: inherit;
  }
  textarea {
    min-height: 400px;
    font-family: monospace;
  }
  button {
    padding: 0.75rem 1.5rem;
    background-color: var(--color-accent);
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
  }
  #status-message {
    margin-top: 1rem;
    font-weight: bold;
  }
</style>